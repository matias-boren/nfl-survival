import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:pick1/data/teams/team_repositories.dart';
import 'package:pick1/data/models/team.dart';

class SupabaseTeamRecordRepository implements TeamRecordRepository {
  final SupabaseClient _supabase = Supabase.instance.client;

  @override
  Future<List<TeamRecord>> getTeamRecords(int season, int week) async {
    try {
      final response = await _supabase
          .from('team_records')
          .select()
          .eq('season', season)
          .eq('week', week)
          .order('wins', ascending: false);

      return response.map((row) => _teamRecordFromSupabase(row)).toList();
    } catch (e) {
      print('Error fetching team records: $e');
      return [];
    }
  }

  @override
  Future<TeamRecord?> getTeamRecord(String teamId, int season, int week) async {
    try {
      final response = await _supabase
          .from('team_records')
          .select()
          .eq('team_id', teamId)
          .eq('season', season)
          .eq('week', week)
          .maybeSingle();

      if (response == null) return null;
      return _teamRecordFromSupabase(response);
    } catch (e) {
      print('Error fetching team record: $e');
      return null;
    }
  }

  @override
  Future<List<TeamRecord>> getTeamRecordHistory(String teamId, int season) async {
    try {
      final response = await _supabase
          .from('team_records')
          .select()
          .eq('team_id', teamId)
          .eq('season', season)
          .order('week', ascending: false);

      return response.map((row) => _teamRecordFromSupabase(row)).toList();
    } catch (e) {
      print('Error fetching team record history: $e');
      return [];
    }
  }

  @override
  Future<void> createTeamRecord(TeamRecord record) async {
    try {
      await _supabase.from('team_records').insert(_teamRecordToSupabase(record));
    } catch (e) {
      print('Error creating team record: $e');
      rethrow;
    }
  }

  @override
  Future<void> updateTeamRecord(TeamRecord record) async {
    try {
      await _supabase
          .from('team_records')
          .update(_teamRecordToSupabase(record))
          .eq('id', record.id);
    } catch (e) {
      print('Error updating team record: $e');
      rethrow;
    }
  }

  @override
  Future<void> deleteTeamRecord(String recordId) async {
    try {
      await _supabase.from('team_records').delete().eq('id', recordId);
    } catch (e) {
      print('Error deleting team record: $e');
      rethrow;
    }
  }

  @override
  Future<void> updateTeamRecordFromGameResult({
    required String teamId,
    required int season,
    required int week,
    required bool won,
    required bool tied,
  }) async {
    try {
      // Get existing record or create new one
      TeamRecord? existingRecord = await getTeamRecord(teamId, season, week);
      
      if (existingRecord != null) {
        // Update existing record
        final updatedRecord = existingRecord.copyWith(
          wins: won ? existingRecord.wins + 1 : existingRecord.wins,
          losses: !won && !tied ? existingRecord.losses + 1 : existingRecord.losses,
          ties: tied ? existingRecord.ties + 1 : existingRecord.ties,
          lastUpdated: DateTime.now(),
        );
        await updateTeamRecord(updatedRecord);
      } else {
        // Create new record
        final newRecord = TeamRecord(
          id: '', // Will be generated by database
          teamId: teamId,
          season: season,
          week: week,
          wins: won ? 1 : 0,
          losses: !won && !tied ? 1 : 0,
          ties: tied ? 1 : 0,
          lastUpdated: DateTime.now(),
        );
        await createTeamRecord(newRecord);
      }
    } catch (e) {
      print('Error updating team record from game result: $e');
      rethrow;
    }
  }

  TeamRecord _teamRecordFromSupabase(Map<String, dynamic> data) {
    return TeamRecord(
      id: data['id'],
      teamId: data['team_id'],
      season: data['season'],
      week: data['week'],
      wins: data['wins'],
      losses: data['losses'],
      ties: data['ties'],
      lastUpdated: DateTime.parse(data['last_updated']),
    );
  }

  Map<String, dynamic> _teamRecordToSupabase(TeamRecord record) {
    return {
      'id': record.id,
      'team_id': record.teamId,
      'season': record.season,
      'week': record.week,
      'wins': record.wins,
      'losses': record.losses,
      'ties': record.ties,
      'last_updated': record.lastUpdated.toIso8601String(),
    };
  }
}
