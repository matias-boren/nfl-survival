import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:nfl_survival/app/providers.dart';
import 'package:nfl_survival/data/models/league.dart';
import 'package:nfl_survival/widgets/app_scaffold.dart';

class LeagueCreateScreen extends ConsumerStatefulWidget {
  const LeagueCreateScreen({super.key});

  @override
  ConsumerState<LeagueCreateScreen> createState() => _LeagueCreateScreenState();
}

class _LeagueCreateScreenState extends ConsumerState<LeagueCreateScreen> {
  final _formKey = GlobalKey<FormState>();
  final _leagueNameController = TextEditingController();
  
  // League settings
  int _maxLosses = 0;
  bool _allowTeamReuse = false;
  bool _autoEliminateOnNoPick = true;
  LeagueVisibility _visibility = LeagueVisibility.PRIVATE;
  
  bool _isCreating = false;

  @override
  void dispose() {
    _leagueNameController.dispose();
    super.dispose();
  }

  Future<void> _createLeague() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() => _isCreating = true);
    
    try {
      final currentUser = ref.read(currentUserProvider);
      if (currentUser == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please sign in first')),
        );
        return;
      }

      // Check freemium limits
      final isPremium = ref.read(premiumStatusProvider);
      if (!isPremium && currentUser.joinedLeagueIds.length >= 1) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Free users can only join 1 league. Upgrade to Premium for unlimited leagues!'),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 4),
          ),
        );
        context.go('/paywall');
        return;
      }

      final newLeague = League(
        id: '', // Will be generated by repository
        name: _leagueNameController.text.trim(),
        ownerId: currentUser.id,
        visibility: _visibility,
        settings: LeagueSettings(
          maxLosses: _maxLosses,
          allowTeamReuse: _allowTeamReuse,
          autoEliminateOnNoPick: _autoEliminateOnNoPick,
        ),
        season: 2025, // Mock season
        createdAtIso: DateTime.now().toIso8601String(),
        memberIds: [currentUser.id],
      );

      final createdLeague = await ref.read(leagueRepositoryProvider).createLeague(newLeague);
      
      // Update user's joinedLeagueIds
      final updatedUser = currentUser.copyWith(
        joinedLeagueIds: [...currentUser.joinedLeagueIds, createdLeague.id],
      );
      ref.read(currentUserProvider.notifier).state = updatedUser;
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('League created successfully!')),
        );
        context.go('/league/${createdLeague.id}');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error creating league: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isCreating = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final isPremium = ref.watch(premiumStatusProvider);
    
    return AppScaffold(
      appBar: AppBar(
        title: const Text('Create League'),
        leading: IconButton(
          icon: const Icon(Icons.close),
          onPressed: () => context.pop(),
        ),
      ),
      child: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // League Name
              Text(
                'League Name',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              TextFormField(
                controller: _leagueNameController,
                decoration: const InputDecoration(
                  hintText: 'Enter league name',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter a league name';
                  }
                  if (value.trim().length < 3) {
                    return 'League name must be at least 3 characters';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24),

              // Visibility
              Text(
                'League Visibility',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Card(
                child: Column(
                  children: [
                    RadioListTile<LeagueVisibility>(
                      title: const Text('Public'),
                      subtitle: const Text('Anyone can join'),
                      value: LeagueVisibility.PUBLIC,
                      groupValue: _visibility,
                      onChanged: (value) => setState(() => _visibility = value!),
                    ),
                    RadioListTile<LeagueVisibility>(
                      title: const Text('Private'),
                      subtitle: const Text('Invitation only with code'),
                      value: LeagueVisibility.PRIVATE,
                      groupValue: _visibility,
                      onChanged: (value) => setState(() => _visibility = value!),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),

              // Premium Settings Notice
              if (!isPremium) ...[
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade50,
                    border: Border.all(color: Colors.orange.shade200),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.info, color: Colors.orange.shade700),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Premium users can customize advanced settings. You\'re creating a basic league.',
                          style: TextStyle(color: Colors.orange.shade700),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 24),
              ],

              // League Settings
              Text(
                'League Settings',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),

              // Max Losses
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Maximum Losses',
                        style: Theme.of(context).textTheme.titleSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'How many losses before elimination?',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 12),
                      Row(
                        children: [
                          Expanded(
                            child: Slider(
                              value: _maxLosses.toDouble(),
                              min: 0,
                              max: 3,
                              divisions: 3,
                              label: _maxLosses == 0 ? 'Sudden Death' : '$_maxLosses Loss${_maxLosses == 1 ? '' : 'es'}',
                              onChanged: isPremium ? (value) => setState(() => _maxLosses = value.toInt()) : null,
                            ),
                          ),
                          if (!isPremium)
                            Icon(Icons.lock, color: Colors.grey[400], size: 20),
                        ],
                      ),
                      Text(
                        _maxLosses == 0 
                            ? 'Sudden Death - One loss and you\'re out!'
                            : '$_maxLosses loss${_maxLosses == 1 ? '' : 'es'} allowed before elimination',
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),

              // Team Reuse
              Card(
                child: SwitchListTile(
                  title: const Text('Allow Team Reuse'),
                  subtitle: const Text('Can pick the same team multiple times'),
                  value: _allowTeamReuse,
                  onChanged: isPremium ? (value) => setState(() => _allowTeamReuse = value) : null,
                  secondary: !isPremium ? Icon(Icons.lock, color: Colors.grey[400]) : null,
                ),
              ),
              const SizedBox(height: 16),

              // Auto Eliminate
              Card(
                child: SwitchListTile(
                  title: const Text('Auto-Eliminate on No Pick'),
                  subtitle: const Text('Eliminate users who miss the deadline'),
                  value: _autoEliminateOnNoPick,
                  onChanged: isPremium ? (value) => setState(() => _autoEliminateOnNoPick = value) : null,
                  secondary: !isPremium ? Icon(Icons.lock, color: Colors.grey[400]) : null,
                ),
              ),
              const SizedBox(height: 16),

              // Points System Info
              Card(
                color: Colors.blue[50],
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.info_outline, color: Colors.blue[700], size: 20),
                          const SizedBox(width: 8),
                          Text(
                            'Points For Tiebreaker',
                            style: Theme.of(context).textTheme.titleSmall?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: Colors.blue[700],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Ties in standings are broken by "Points For" - the total points scored by teams you picked correctly. Example: Pick ARI (wins 24-20) = 24 points.',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Colors.blue[600],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 32),

              // Create Button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isCreating ? null : _createLeague,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: _isCreating
                      ? const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                            SizedBox(width: 12),
                            Text('Creating League...'),
                          ],
                        )
                      : const Text('Create League'),
                ),
              ),
              const SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }

}
